// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - stores user account information
model User {
  id                Int                @id @default(autoincrement())
  email             String             @unique
  name              String
  password          String             // Hashed password
  notificationEmail String             // Email for receiving notifications
  coopUsername      String?            // Optional: Food coop website username
  coopPassword      String?            // Optional: Food coop website password (encrypted)
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deletedAt         DateTime?          // Soft delete

  // Relations
  shiftPreferences  ShiftPreference[]
  notifications     Notification[]
  settings          UserSettings?

  @@map("users")
}

// User settings for notification preferences
model UserSettings {
  id                 Int      @id @default(autoincrement())
  userId             Int      @unique
  emailNotifications Boolean  @default(true)
  checkFrequency     String   @default("5min") // How often to check for shifts
  timezone           String   @default("America/New_York")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

// Shift preferences - what shifts users want to be notified about
model ShiftPreference {
  id                Int      @id @default(autoincrement())
  userId            Int
  shiftType         String   // e.g., "STOCKING", "DAIRY_LIFTING", "GENERAL_MEETING_WORKSLOT"
  days              String[] // Array of days: ["Monday", "Wednesday"]
  timeRangeStart    String   // e.g., "17:00" (5 PM)
  timeRangeEnd      String   // e.g., "22:00" (10 PM)
  notificationEmail String   // Override user's default email if needed
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("shift_preferences")
}

// Notifications sent to users
model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String   // "SHIFT_AVAILABLE", "SYSTEM", etc.
  title     String
  message   String
  isRead    Boolean  @default(false)
  sentAt    DateTime @default(now())
  readAt    DateTime?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Audit log for tracking system events
model AuditLog {
  id        Int      @id @default(autoincrement())
  action    String   // e.g., "USER_LOGIN", "SHIFT_CHECK", "EMAIL_SENT"
  userId    Int?     // Optional: user who triggered the action
  details   Json?    // Additional details about the action
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}

// Available shifts found by the checker script
model AvailableShift {
  id          Int      @id @default(autoincrement())
  shiftType   String
  shiftTypeId Int?     // ID from the food coop website
  day         String   // e.g., "Monday"
  date        String   // e.g., "2024-01-15"
  time        String   // e.g., "5:00 PM - 10:00 PM"
  location    String?
  href        String?  // Link to the shift on the website
  isAvailable Boolean  @default(true)
  foundAt     DateTime @default(now())
  expiresAt   DateTime? // When this shift expires

  @@map("available_shifts")
}
